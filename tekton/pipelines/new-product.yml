apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: new-product-pipeline
  namespace: idp-platform-devops
spec:
  params:
    # product specific params
    - name: product_name
      description: Name of the product
    - name: base_domain
      description: Route53 domain name
    - name: environment
      description: Product environment name i.e. staging, production etc.
    - name: product_env_prefix
      description: Product environment prefix to use for creating resources
      default: ""
    - name: predefined_template
      description: Choose a predefined templates for product setup
      default: ""
    - name: microservices_json
      description: Product's microservices configurations as a json string
      default: "[]"
    - name: github_webhook_access_token
      description: Github PAT which has access to create webhooks for repositories

    # kubernetes specific params
    - name: aws_region
      description: AWS Region
      default: us-east-1
    - name: eks_cluster_name
      description: Name of the EKS cluster to create resources against

    # Platform specific params
    - name: idp_git_repo_url
      description: Internal developer platform git repo url
      default: https://github.com/tarkalabs/internal-developer-platform
    - name: idp_git_repo_revision
      description: Cloud dev git repo revision(i.e. branch, tag, sha, ref, etc...) to use
      default: dev
    - name: idp_base_image
      description: Base image to use for all the tasks
      default: 260741046218.dkr.ecr.us-east-1.amazonaws.com/idp:base-v3
    - name: idp_platform_namespace
      description: Platform namespace to create tekton resources in
      default: idp-platform-devops
    - name: idp_platform_tekton_namespace
      description: Platform namespace to create tekton resources in
      default: tekton-pipelines
    - name: idp_platform_debug_mode
      description: Enable platform debug mode for testing
      default: "false"

  workspaces:
    - name: shared
      description: Workspace to checkout git repositories into

  tasks:
    - name: clone-repo
      workspaces:
        - name: output
          workspace: shared
      taskRef:
        name: git-clone
      params:
        - name: url
          value: "$(params.idp_git_repo_url)"
        - name: revision
          value: "$(params.idp_git_repo_revision)"
        - name: depth
          value: 1

    - name: init-and-validate
      runAfter:
        - clone-repo
      workspaces:
        - name: shared
      taskSpec:
        workspaces:
          - name: shared
        params:
          - name: idp_base_image
            default: "$(params.idp_base_image)"
          - name: idp_platform_debug_mode
            default: "$(params.idp_platform_debug_mode)"
          - name: aws_region
            default: "$(params.aws_region)"
          - name: eks_cluster_name
            default: "$(params.eks_cluster_name)"
          - name: predefined_template
            default: "$(params.predefined_template)"
          - name: microservices_json
            default: "$(params.microservices_json)"
          - name: github_webhook_access_token
            default: "$(params.github_webhook_access_token)"
        steps:
          - name: init
            image: "$(params.idp_base_image)"
            workingDir: $(workspaces.shared.path)/scripts
            script: |
              printf '%s' "$MICROSERVICES_JSON" > microservices.json
            env:
              - name: MICROSERVICES_JSON
                value: "$(params.microservices_json)"
          - name: validate
            image: "$(params.idp_base_image)"
            workingDir: $(workspaces.shared.path)/scripts
            script: |
              go run resource-definitions.go validate-product.go
            env:
              - name: DEBUG_MODE
                value: "$(params.idp_platform_debug_mode)"
              - name: PREDEFINED_TEMPLATE
                value: "$(params.predefined_template)"
              - name: MICROSERVICES_JSON_FILE_PATH
                value: microservices.json
              - name: GITHUB_WEBHOOK_ACCESS_TOKEN
                value: "$(params.github_webhook_access_token)"

    - name: generate-resources
      runAfter:
        - init-and-validate
      workspaces:
        - name: shared
      taskSpec:
        workspaces:
          - name: shared
        params:
          - name: idp_base_image
            default: "$(params.idp_base_image)"
          - name: product_name
            default: "$(params.product_name)"
          - name: base_domain
            default: "$(params.base_domain)"
          - name: predefined_template
            default: "$(params.predefined_template)"
          - name: github_webhook_access_token
            default: "$(params.github_webhook_access_token)"
        steps:
          - name: generate-files
            image: "$(params.idp_base_image)"
            workingDir: $(workspaces.shared.path)
            script: |
              rm -rf $OUTPUT_PATH/*
              go run scripts/resource-definitions.go scripts/generate-resources.go
            env:
              - name: ProductName
                value: "$(params.product_name)"
              - name: BASE_DOMAIN
                value: "$(params.base_domain)"
              - name: PREDEFINED_TEMPLATE
                value: "$(params.predefined_template)"
              - name: MICROSERVICES_JSON_FILE_PATH
                value: scripts/microservices.json
              - name: GITHUB_WEBHOOK_ACCESS_TOKEN
                value: "$(params.github_webhook_access_token)"
              - name: APP_TEMPLATES_PATH
                value: "$(workspaces.shared.path)/app-templates"
              - name: K8S_MANIFESTS_PATH
                value: "$(workspaces.shared.path)/k8s-manifests"
              - name: GITHUB_WORKFLOWS_PATH
                value: "$(workspaces.shared.path)/github-workflows"
              - name: OUTPUT_PATH
                value: "$(workspaces.shared.path)/output"

    - name: create-tekton-resources
      runAfter:
        - generate-resources
      workspaces:
        - name: shared
      taskSpec:
        workspaces:
          - name: shared
        params:
          - name: idp_base_image
            default: "$(params.idp_base_image)"
          - name: idp_platform_tekton_namespace
            default: "$(params.idp_platform_tekton_namespace)"
          - name: idp_platform_debug_mode
            default: "$(params.idp_platform_debug_mode)"
          - name: product_name
            default: "$(params.product_name)"
          - name: base_domain
            default: "$(params.base_domain)"
        steps:
          - name: helm-install
            image: "$(params.idp_base_image)"
            workingDir: $(workspaces.shared.path)
            script: |
              go run scripts/resource-definitions.go scripts/create-tekton-triggers.go
            env:
              - name: MICROSERVICES_JSON_FILE_PATH
                value: scripts/microservices.json
              - name: TEKTON_NAMESPACE
                value: "$(params.idp_platform_tekton_namespace)"
              - name: DEBUG_MODE
                value: "$(params.idp_platform_debug_mode)"
              - name: HELM_CHART_PATH
                value: "$(workspaces.shared.path)/kubernetes/app-helm-chart/"

    - name: create-webhook-and-git-push-resources
      runAfter:
        - create-tekton-resources
      workspaces:
        - name: shared
      taskSpec:
        workspaces:
          - name: shared
        params:
          - name: idp_base_image
            default: "$(params.idp_base_image)"
          - name: product_name
            default: "$(params.product_name)"
          - name: base_domain
            default: "$(params.base_domain)"
        steps:
          - name: create-webhooks
            image: "$(params.idp_base_image)"
            workingDir: $(workspaces.shared.path)
            script: |
              go run scripts/resource-definitions.go scripts/create-github-webhooks.go
            env:
              - name: MICROSERVICES_JSON_FILE_PATH
                value: scripts/microservices.json
              - name: HELM_CHART_PATH
                value: "$(workspaces.shared.path)/kubernetes/app-helm-chart/"
