apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: new-product-pipeline
  namespace: idp-platform-devops
spec:
  params:
    # product specific params
    - name: product_name
      description: Name of the product
    - name: base_domain
      description: Route53 domain name
    - name: environment
      description: Product environment name i.e. staging, production etc.
    - name: product_env_prefix
      description: Product environment prefix to use for creating resources
      default: ""
    - name: predefined_template
      description: Choose a predefined templates for product setup
      default: ""
    - name: microservices_json
      description: Product's microservices configurations as a json string
      default: "[]"
    - name: github_webhook_access_token
      description: Github PAT which has access to create webhooks for repositories
    - name: product_base_ecr_repo_url
      description: Base ECR repository url for the product

    # kubernetes specific params
    - name: aws_region
      description: AWS Region
      default: us-east-1
    - name: eks_cluster_name
      description: Name of the EKS cluster to create resources against

    # Platform specific params
    - name: idp_git_repo_url
      description: Internal developer platform git repo url
      default: https://github.com/tarkalabs/internal-developer-platform
    - name: idp_git_repo_revision
      description: Cloud dev git repo revision(i.e. branch, tag, sha, ref, etc...) to use
      default: dev
    - name: idp_base_image
      description: Base image to use for all the tasks
      default: 260741046218.dkr.ecr.us-east-1.amazonaws.com/idp:base-v4
    - name: idp_platform_ops_iam_role_arn
      description: Platform IAM role to use for app pipelines
      default: xxx
    - name: idp_platform_namespace
      description: Platform namespace to create tekton resources in
      default: idp-platform-devops
    - name: idp_platform_tekton_namespace
      description: Platform namespace to create tekton resources in
      default: tekton-pipelines
    - name: idp_platform_debug_mode
      description: Enable platform debug mode for testing
      default: "false"
    - name: idp_platform_admin_email
      description: Name of the platform admin which will be used for git commits and other operations
      default: devops@tarkalabs.com
    - name: idp_platform_admin_name
      description: Name of the platform admin which will be used for git commits and other operations
      default: DevOps

  workspaces:
    - name: shared
      description: Workspace to checkout git repositories into

  tasks:
    - name: clone-repo
      workspaces:
        - name: output
          workspace: shared
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.idp_git_repo_url)
        - name: revision
          value: $(params.idp_git_repo_revision)
        - name: depth
          value: 1

    - name: init-and-validate
      runAfter:
        - clone-repo
      workspaces:
        - name: shared
      taskSpec:
        workspaces:
          - name: shared
        results:
          - name: aws-account-id
          - name: eks-oidc-id
        params:
          - name: idp_base_image
            default: $(params.idp_base_image)
          - name: idp_platform_debug_mode
            default: $(params.idp_platform_debug_mode)
          - name: aws_region
            default: $(params.aws_region)
          - name: eks_cluster_name
            default: $(params.eks_cluster_name)
          - name: predefined_template
            default: $(params.predefined_template)
          - name: microservices_json
            default: $(params.microservices_json)
          - name: github_webhook_access_token
            default: $(params.github_webhook_access_token)
        steps:
          - name: init
            image: $(params.idp_base_image)
            workingDir: $(workspaces.shared.path)/scripts
            script: |
              printf '%s' "$MICROSERVICES_JSON" > microservices.json
              aws --region $(params.aws_region) sts get-caller-identity --output text --query "Account" > $(results.aws-account-id.path)
              aws --region $(params.aws_region) eks describe-cluster --name $(params.eks_cluster_name) --output text --query "cluster.identity.oidc.issuer" | rev | cut -d'/' -f1 | rev > $(results.eks-oidc-id.path)
            env:
              - name: MICROSERVICES_JSON
                value: $(params.microservices_json)
          - name: validate
            image: $(params.idp_base_image)
            workingDir: $(workspaces.shared.path)/scripts
            script: |
              go run resource-definitions.go validate-product.go
            env:
              - name: DEBUG_MODE
                value: $(params.idp_platform_debug_mode)
              - name: PREDEFINED_TEMPLATE
                value: $(params.predefined_template)
              - name: MICROSERVICES_JSON_FILE_PATH
                value: microservices.json
              - name: GITHUB_WEBHOOK_ACCESS_TOKEN
                value: $(params.github_webhook_access_token)

    - name: generate-resources
      runAfter:
        - init-and-validate
      workspaces:
        - name: shared
      taskSpec:
        workspaces:
          - name: shared
        results:
          - name: app-role-arn
        params:
          - name: idp_base_image
            default: $(params.idp_base_image)
          - name: idp_platform_namespace
            default: $(params.idp_platform_namespace)
          - name: idp_platform_admin_email
            default: $(params.idp_platform_admin_email)
          - name: idp_platform_admin_name
            default: $(params.idp_platform_admin_name)
          - name: aws_region
            default: $(params.aws_region)
          - name: product_name
            default: $(params.product_name)
          - name: product_env_prefix
            default: $(params.product_env_prefix)
          - name: base_domain
            default: $(params.base_domain)
          - name: predefined_template
            default: $(params.predefined_template)
          - name: github_webhook_access_token
            default: $(params.github_webhook_access_token)
        steps:
          - name: generate-files
            image: $(params.idp_base_image)
            workingDir: $(workspaces.shared.path)
            script: |
              rm -rf $OUTPUT_PATH/*
              go run scripts/resource-definitions.go scripts/generate-resources.go
            env:
              - name: ADMIN_EMAIL
                value: $(params.idp_platform_admin_email)
              - name: ADMIN_NAME
                value: $(params.idp_platform_admin_name)
              - name: BASE_DOMAIN
                value: $(params.base_domain)
              - name: PREDEFINED_TEMPLATE
                value: $(params.predefined_template)
              - name: MICROSERVICES_JSON_FILE_PATH
                value: scripts/microservices.json
              - name: GITHUB_WEBHOOK_ACCESS_TOKEN
                value: $(params.github_webhook_access_token)
              - name: APP_TEMPLATES_PATH
                value: "$(workspaces.shared.path)/app-templates"
              - name: K8S_MANIFESTS_PATH
                value: "$(workspaces.shared.path)/k8s-manifests"
              - name: GITHUB_WORKFLOWS_PATH
                value: "$(workspaces.shared.path)/github-workflows"
              - name: OUTPUT_PATH
                value: "$(workspaces.shared.path)/output"
          - name: trust-policy-json
            image: $(params.idp_base_image)
            workingDir: $(workspaces.shared.path)
            script: |
              gomplate -f scripts/eks-iam-role-trust-policy.json.tmpl > eks-iam-role-trust-policy.json
            env:
              - name: AWS_ACCOUNT_ID
                value: $(tasks.init-and-validate.results.aws-account-id)
              - name: AWS_REGION
                value: $(params.aws_region)
              - name: EKS_OIDC_ID
                value: $(tasks.init-and-validate.results.eks-oidc-id)
              - name: PRODUCT_APP_NAMESPACE
                value: $(params.product_env_prefix)-$(params.product_name)
          - name: create-iam-ecr-role
            image: $(params.idp_base_image)
            script: |
              RoleExists=$(aws --region $(params.aws_region) iam get-role --role-name $ROLE_NAME 2>&1 | grep -v 'NoSuchEntity')
              if [ -z "$RoleExists" ]; then
                aws --region $(params.aws_region) iam create-role --role-name $ROLE_NAME --query "Role.Arn" --output text --assume-role-policy-document file://eks-iam-role-trust-policy.json > $(results.app-role-arn.path)
                aws --region $(params.aws_region) iam attach-role-policy --role-name $ROLE_NAME --policy-arn "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
              else
                echo $ROLE_NAME already exists. Skipping role creation.
              fi
            env:
              - name: ROLE_NAME
                value: idp-$(params.product_name)-app-role

    - name: update-tekton-resources
      runAfter:
        - generate-resources
      workspaces:
        - name: shared
      taskSpec:
        workspaces:
          - name: shared
        params:
          - name: product_base_ecr_repo_url
            default: $(params.product_base_ecr_repo_url)
          - name: idp_base_image
            default: $(params.idp_base_image)
          - name: idp_platform_namespace
            default: $(params.idp_platform_namespace)
          - name: idp_platform_ops_iam_role_arn
            default: $(params.idp_platform_ops_iam_role_arn)
          - name: idp_platform_debug_mode
            default: $(params.idp_platform_debug_mode)
          - name: base_domain
            default: $(params.base_domain)
        steps:
          - name: helm-install
            image: $(params.idp_base_image)
            workingDir: $(workspaces.shared.path)
            script: |
              go run scripts/resource-definitions.go scripts/configure-tekton-triggers.go
            env:
              - name: MICROSERVICES_JSON_FILE_PATH
                value: scripts/microservices.json
              - name: PLATFORM_NAMESPACE
                value: $(params.idp_platform_namespace)
              - name: DEBUG_MODE
                value: $(params.idp_platform_debug_mode)
              - name: HELM_CHART_PATH
                value: "$(workspaces.shared.path)/kubernetes/app-helm-chart/"
              - name: BASE_ECR_URL
                value: $(params.product_base_ecr_repo_url)
              - name: PIPELINE_BASE_IMAGE
                value: $(params.idp_base_image)
              - name: PIPELINE_DEFAULT_STORAGE_CLASS
                value: gp3-delete
              - name: PIPELINE_IAM_ROLE_ARN
                value: $(params.idp_platform_ops_iam_role_arn)
              - name: APP_IAM_ROLE_ARN
                value: $(tasks.generate-resources.results.app-role-arn)

    - name: setup-git-repos
      runAfter:
        - update-tekton-resources
      workspaces:
        - name: shared
      taskSpec:
        workspaces:
          - name: shared
        params:
          - name: idp_platform_debug_mode
            default: $(params.idp_platform_debug_mode)
          - name: idp_base_image
            default: $(params.idp_base_image)
          - name: base_domain
            default: $(params.base_domain)
        steps:
          - name: configure-webhooks
            image: $(params.idp_base_image)
            workingDir: $(workspaces.shared.path)
            script: |
              go run scripts/resource-definitions.go scripts/configure-github-webhooks.go
            env:
              - name: MICROSERVICES_JSON_FILE_PATH
                value: scripts/microservices.json
              - name: HELM_CHART_PATH
                value: "$(workspaces.shared.path)/kubernetes/app-helm-chart/"
          - name: commit-and-push
            image: $(params.idp_base_image)
            workingDir: $(workspaces.shared.path)
            script: |
              go run scripts/resource-definitions.go scripts/git-commit-and-push.go
            env:
              - name: DEBUG_MODE
                value: $(params.idp_platform_debug_mode)
              - name: MICROSERVICES_JSON_FILE_PATH
                value: scripts/microservices.json
              - name: OUTPUT_PATH
                value: "$(workspaces.shared.path)/output"
              - name: GIT_SHELL_SCRIPT_TEMPLATE_PATH
                value: "$(workspaces.shared.path)/scripts/git-commit-and-push.sh.tmpl"
